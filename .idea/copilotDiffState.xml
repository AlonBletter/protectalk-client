<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/protectalk/protectalk/ui/protection/Models.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/protectalk/protectalk/ui/protection/Models.kt" />
              <option name="originalContent" value="package com.protectalk.protectalk.ui.protection&#10;&#10;import com.protectalk.protectalk.data.model.dto.ContactType&#10;import com.protectalk.protectalk.data.model.dto.LinkedContactDto&#10;import com.protectalk.protectalk.data.model.dto.PendingContactRequestDto&#10;&#10;// UI-only models (replace with real entities later)&#10;enum class Relation {&#10;    Family, Friend, Other;&#10;&#10;    // Convert UI relation to server relationship string&#10;    fun toServerString(): String = when (this) {&#10;        Family -&gt; &quot;FAMILY&quot;&#10;        Friend -&gt; &quot;FRIEND&quot;&#10;        Other -&gt; &quot;OTHER&quot;&#10;    }&#10;}&#10;&#10;data class PendingRequest(&#10;    val id: String,&#10;    val otherName: String,&#10;    val otherPhone: String,&#10;    val relation: Relation,&#10;    val contactType: String // &quot;TRUSTED_CONTACT&quot; or &quot;PROTEGEE&quot;&#10;)&#10;&#10;data class LinkContact(&#10;    val id: String,&#10;    val name: String,&#10;    val phone: String,&#10;    val relation: Relation&#10;)&#10;&#10;enum class DialogRole {&#10;    ProtegeeAsks, TrustedOffers;&#10;&#10;    // Convert dialog role to server ContactType&#10;    fun toContactType(): ContactType = when (this) {&#10;        ProtegeeAsks -&gt; ContactType.TRUSTED  // I'm asking someone to be my trusted contact&#10;        TrustedOffers -&gt; ContactType.PROTEGEE // I'm offering to protect someone (they become my protegee)&#10;    }&#10;}&#10;&#10;enum class ProtectionTab { Protegee, Trusted }&#10;&#10;// Mapper functions to convert server DTOs to UI models&#10;fun LinkedContactDto.toUIModel(): LinkContact {&#10;    val relation = when (relationship.uppercase()) {&#10;        &quot;FAMILY&quot; -&gt; Relation.Family&#10;        &quot;FRIEND&quot; -&gt; Relation.Friend&#10;        else -&gt; Relation.Other&#10;    }&#10;    return LinkContact(&#10;        id = phoneNumber, // Use phone as ID since server doesn't provide separate ID&#10;        name = name,&#10;        phone = phoneNumber,&#10;        relation = relation&#10;    )&#10;}&#10;&#10;// For incoming requests (from pendingReceivedRequests) - show who sent the request&#10;fun PendingContactRequestDto.toUIModelForIncoming(): PendingRequest {&#10;    val relation = when (relationship.uppercase()) {&#10;        &quot;FAMILY&quot; -&gt; Relation.Family&#10;        &quot;FRIEND&quot; -&gt; Relation.Friend&#10;        else -&gt; Relation.Other&#10;    }&#10;&#10;    val requestId = id ?: run {&#10;        android.util.Log.w(&quot;Models&quot;, &quot;Server didn't provide ID for pending request&quot;)&#10;        &quot;${targetName}_${targetPhoneNumber}_${System.currentTimeMillis()}&quot;&#10;    }&#10;&#10;    return PendingRequest(&#10;        id = requestId,&#10;        otherName = targetName ?: targetPhoneNumber, // Show the target user's name (who sent us the request)&#10;        otherPhone = targetPhoneNumber,&#10;        relation = relation,&#10;        contactType = contactType&#10;    )&#10;}&#10;&#10;// For outgoing requests (from pendingSentRequests) - show who we sent the request to&#10;fun PendingContactRequestDto.toUIModelForOutgoing(): PendingRequest {&#10;    val relation = when (relationship.uppercase()) {&#10;        &quot;FAMILY&quot; -&gt; Relation.Family&#10;        &quot;FRIEND&quot; -&gt; Relation.Friend&#10;        else -&gt; Relation.Other&#10;    }&#10;&#10;    val requestId = id ?: run {&#10;        android.util.Log.w(&quot;Models&quot;, &quot;Server didn't provide ID for pending request&quot;)&#10;        &quot;${targetName}_${targetPhoneNumber}_${System.currentTimeMillis()}&quot;&#10;    }&#10;&#10;    return PendingRequest(&#10;        id = requestId,&#10;        otherName = targetName ?: targetPhoneNumber, // Show who we sent the request to&#10;        otherPhone = targetPhoneNumber,&#10;        relation = relation,&#10;        contactType = contactType&#10;    )&#10;}&#10;" />
              <option name="updatedContent" value="package com.protectalk.protectalk.ui.protection&#10;&#10;import com.protectalk.protectalk.data.model.dto.ContactType&#10;import com.protectalk.protectalk.data.model.dto.LinkedContactDto&#10;import com.protectalk.protectalk.data.model.dto.PendingContactRequestDto&#10;&#10;// UI-only models (replace with real entities later)&#10;enum class Relation {&#10;    Family, Friend, Other;&#10;&#10;    // Convert UI relation to server relationship string&#10;    fun toServerString(): String = when (this) {&#10;        Family -&gt; &quot;FAMILY&quot;&#10;        Friend -&gt; &quot;FRIEND&quot;&#10;        Other -&gt; &quot;OTHER&quot;&#10;    }&#10;}&#10;&#10;data class PendingRequest(&#10;    val id: String,&#10;    val otherName: String,&#10;    val otherPhone: String,&#10;    val relation: Relation,&#10;    val contactType: String // &quot;TRUSTED_CONTACT&quot; or &quot;PROTEGEE&quot;&#10;)&#10;&#10;data class LinkContact(&#10;    val id: String,&#10;    val name: String,&#10;    val phone: String,&#10;    val relation: Relation&#10;)&#10;&#10;enum class DialogRole {&#10;    ProtegeeAsks, TrustedOffers;&#10;&#10;    // Convert dialog role to server ContactType&#10;    fun toContactType(): ContactType = when (this) {&#10;        ProtegeeAsks -&gt; ContactType.TRUSTED  // I'm asking someone to be my trusted contact&#10;        TrustedOffers -&gt; ContactType.PROTEGEE // I'm offering to protect someone (they become my protegee)&#10;    }&#10;}&#10;&#10;enum class ProtectionTab { Protegee, Trusted }&#10;&#10;// Mapper functions to convert server DTOs to UI models&#10;fun LinkedContactDto.toUIModel(): LinkContact {&#10;    val relation = when (relationship.uppercase()) {&#10;        &quot;FAMILY&quot; -&gt; Relation.Family&#10;        &quot;FRIEND&quot; -&gt; Relation.Friend&#10;        else -&gt; Relation.Other&#10;    }&#10;    return LinkContact(&#10;        id = phoneNumber, // Use phone as ID since server doesn't provide separate ID&#10;        name = name,&#10;        phone = phoneNumber,&#10;        relation = relation&#10;    )&#10;}&#10;&#10;// For incoming requests (from pendingReceivedRequests) - show who sent the request&#10;fun PendingContactRequestDto.toUIModelForIncoming(): PendingRequest {&#10;    val relation = when (relationship.uppercase()) {&#10;        &quot;FAMILY&quot; -&gt; Relation.Family&#10;        &quot;FRIEND&quot; -&gt; Relation.Friend&#10;        else -&gt; Relation.Other&#10;    }&#10;&#10;    val requestId = id ?: run {&#10;        android.util.Log.w(&quot;Models&quot;, &quot;Server didn't provide ID for pending request&quot;)&#10;        &quot;${requesterName}_${requesterPhoneNumber}_${System.currentTimeMillis()}&quot;&#10;    }&#10;&#10;    return PendingRequest(&#10;        id = requestId,&#10;        otherName = requesterName, // Show who sent me the request (the requester)&#10;        otherPhone = requesterPhoneNumber, // Show the requester's phone number&#10;        relation = relation,&#10;        contactType = contactType&#10;    )&#10;}&#10;&#10;// For outgoing requests (from pendingSentRequests) - show who we sent the request to&#10;fun PendingContactRequestDto.toUIModelForOutgoing(): PendingRequest {&#10;    val relation = when (relationship.uppercase()) {&#10;        &quot;FAMILY&quot; -&gt; Relation.Family&#10;        &quot;FRIEND&quot; -&gt; Relation.Friend&#10;        else -&gt; Relation.Other&#10;    }&#10;&#10;    val requestId = id ?: run {&#10;        android.util.Log.w(&quot;Models&quot;, &quot;Server didn't provide ID for pending request&quot;)&#10;        &quot;${targetName}_${targetPhoneNumber}_${System.currentTimeMillis()}&quot;&#10;    }&#10;&#10;    return PendingRequest(&#10;        id = requestId,&#10;        otherName = targetName ?: targetPhoneNumber, // Show who I sent the request to (the target)&#10;        otherPhone = targetPhoneNumber, // Show the target's phone number&#10;        relation = relation,&#10;        contactType = contactType&#10;    )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>